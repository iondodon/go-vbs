// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/iondodon/go-vbs/booking/domain"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	time "time"
)

// MockBookingDateRepository is an autogenerated mock type for the BookingDateRepository type
type MockBookingDateRepository struct {
	mock.Mock
}

type MockBookingDateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingDateRepository) EXPECT() *MockBookingDateRepository_Expecter {
	return &MockBookingDateRepository_Expecter{mock: &_m.Mock}
}

// FindAllInPeriodInclusive provides a mock function with given fields: ctx, from, to
func (_m *MockBookingDateRepository) FindAllInPeriodInclusive(ctx context.Context, from time.Time, to time.Time) ([]*domain.BookingDate, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for FindAllInPeriodInclusive")
	}

	var r0 []*domain.BookingDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]*domain.BookingDate, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []*domain.BookingDate); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.BookingDate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingDateRepository_FindAllInPeriodInclusive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllInPeriodInclusive'
type MockBookingDateRepository_FindAllInPeriodInclusive_Call struct {
	*mock.Call
}

// FindAllInPeriodInclusive is a helper method to define mock.On call
//   - ctx context.Context
//   - from time.Time
//   - to time.Time
func (_e *MockBookingDateRepository_Expecter) FindAllInPeriodInclusive(ctx interface{}, from interface{}, to interface{}) *MockBookingDateRepository_FindAllInPeriodInclusive_Call {
	return &MockBookingDateRepository_FindAllInPeriodInclusive_Call{Call: _e.mock.On("FindAllInPeriodInclusive", ctx, from, to)}
}

func (_c *MockBookingDateRepository_FindAllInPeriodInclusive_Call) Run(run func(ctx context.Context, from time.Time, to time.Time)) *MockBookingDateRepository_FindAllInPeriodInclusive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *MockBookingDateRepository_FindAllInPeriodInclusive_Call) Return(_a0 []*domain.BookingDate, _a1 error) *MockBookingDateRepository_FindAllInPeriodInclusive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingDateRepository_FindAllInPeriodInclusive_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) ([]*domain.BookingDate, error)) *MockBookingDateRepository_FindAllInPeriodInclusive_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, tx, bd
func (_m *MockBookingDateRepository) Save(ctx context.Context, tx *sql.Tx, bd *domain.BookingDate) error {
	ret := _m.Called(ctx, tx, bd)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.BookingDate) error); ok {
		r0 = rf(ctx, tx, bd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingDateRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBookingDateRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - bd *domain.BookingDate
func (_e *MockBookingDateRepository_Expecter) Save(ctx interface{}, tx interface{}, bd interface{}) *MockBookingDateRepository_Save_Call {
	return &MockBookingDateRepository_Save_Call{Call: _e.mock.On("Save", ctx, tx, bd)}
}

func (_c *MockBookingDateRepository_Save_Call) Run(run func(ctx context.Context, tx *sql.Tx, bd *domain.BookingDate)) *MockBookingDateRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(*domain.BookingDate))
	})
	return _c
}

func (_c *MockBookingDateRepository_Save_Call) Return(_a0 error) *MockBookingDateRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingDateRepository_Save_Call) RunAndReturn(run func(context.Context, *sql.Tx, *domain.BookingDate) error) *MockBookingDateRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingDateRepository creates a new instance of MockBookingDateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingDateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingDateRepository {
	mock := &MockBookingDateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
