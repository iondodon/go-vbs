// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/iondodon/go-vbs/booking/domain"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// MockBookingRepository is an autogenerated mock type for the BookingRepository type
type MockBookingRepository struct {
	mock.Mock
}

type MockBookingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingRepository) EXPECT() *MockBookingRepository_Expecter {
	return &MockBookingRepository_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockBookingRepository) GetAll(ctx context.Context) ([]domain.Booking, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Booking, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Booking); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockBookingRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBookingRepository_Expecter) GetAll(ctx interface{}) *MockBookingRepository_GetAll_Call {
	return &MockBookingRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockBookingRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockBookingRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBookingRepository_GetAll_Call) Return(_a0 []domain.Booking, _a1 error) *MockBookingRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]domain.Booking, error)) *MockBookingRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, tx, b
func (_m *MockBookingRepository) Save(ctx context.Context, tx *sql.Tx, b *domain.Booking) error {
	ret := _m.Called(ctx, tx, b)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Booking) error); ok {
		r0 = rf(ctx, tx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBookingRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - b *domain.Booking
func (_e *MockBookingRepository_Expecter) Save(ctx interface{}, tx interface{}, b interface{}) *MockBookingRepository_Save_Call {
	return &MockBookingRepository_Save_Call{Call: _e.mock.On("Save", ctx, tx, b)}
}

func (_c *MockBookingRepository_Save_Call) Run(run func(ctx context.Context, tx *sql.Tx, b *domain.Booking)) *MockBookingRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(*domain.Booking))
	})
	return _c
}

func (_c *MockBookingRepository_Save_Call) Return(_a0 error) *MockBookingRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingRepository_Save_Call) RunAndReturn(run func(context.Context, *sql.Tx, *domain.Booking) error) *MockBookingRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingRepository creates a new instance of MockBookingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingRepository {
	mock := &MockBookingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
