// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	controller "github.com/iondodon/go-vbs/booking/controller"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	uuid "github.com/google/uuid"
)

// MockBookVehicleUseCase is an autogenerated mock type for the BookVehicleUseCase type
type MockBookVehicleUseCase struct {
	mock.Mock
}

type MockBookVehicleUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookVehicleUseCase) EXPECT() *MockBookVehicleUseCase_Expecter {
	return &MockBookVehicleUseCase_Expecter{mock: &_m.Mock}
}

// ForPeriod provides a mock function with given fields: ctx, tx, customerUID, vehicleUUID, period
func (_m *MockBookVehicleUseCase) ForPeriod(ctx context.Context, tx *sql.Tx, customerUID uuid.UUID, vehicleUUID uuid.UUID, period controller.DatePeriodDTO) error {
	ret := _m.Called(ctx, tx, customerUID, vehicleUUID, period)

	if len(ret) == 0 {
		panic("no return value specified for ForPeriod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, controller.DatePeriodDTO) error); ok {
		r0 = rf(ctx, tx, customerUID, vehicleUUID, period)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookVehicleUseCase_ForPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForPeriod'
type MockBookVehicleUseCase_ForPeriod_Call struct {
	*mock.Call
}

// ForPeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - customerUID uuid.UUID
//   - vehicleUUID uuid.UUID
//   - period controller.DatePeriodDTO
func (_e *MockBookVehicleUseCase_Expecter) ForPeriod(ctx interface{}, tx interface{}, customerUID interface{}, vehicleUUID interface{}, period interface{}) *MockBookVehicleUseCase_ForPeriod_Call {
	return &MockBookVehicleUseCase_ForPeriod_Call{Call: _e.mock.On("ForPeriod", ctx, tx, customerUID, vehicleUUID, period)}
}

func (_c *MockBookVehicleUseCase_ForPeriod_Call) Run(run func(ctx context.Context, tx *sql.Tx, customerUID uuid.UUID, vehicleUUID uuid.UUID, period controller.DatePeriodDTO)) *MockBookVehicleUseCase_ForPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(controller.DatePeriodDTO))
	})
	return _c
}

func (_c *MockBookVehicleUseCase_ForPeriod_Call) Return(_a0 error) *MockBookVehicleUseCase_ForPeriod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookVehicleUseCase_ForPeriod_Call) RunAndReturn(run func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, controller.DatePeriodDTO) error) *MockBookVehicleUseCase_ForPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookVehicleUseCase creates a new instance of MockBookVehicleUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookVehicleUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookVehicleUseCase {
	mock := &MockBookVehicleUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
