// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/vehicleRepository.go
//
// Generated by this command:
//
//	mockgen.exe -source=./repository/vehicleRepository.go -destination=./repository/vehicleRepository_mock_test.go -package=repository
//
// Package repository is a generated GoMock package.
package vehicle

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/iondodon/go-vbs/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockVehicleRepository is a mock of VehicleRepository interface.
type MockVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryMockRecorder
}

// MockVehicleRepositoryMockRecorder is the mock recorder for MockVehicleRepository.
type MockVehicleRepositoryMockRecorder struct {
	mock *MockVehicleRepository
}

// NewMockVehicleRepository creates a new mock instance.
func NewMockVehicleRepository(ctrl *gomock.Controller) *MockVehicleRepository {
	mock := &MockVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleRepository) EXPECT() *MockVehicleRepositoryMockRecorder {
	return m.recorder
}

// FindByUUID mocks base method.
func (m *MockVehicleRepository) FindByUUID(vUUID uuid.UUID) (*domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", vUUID)
	ret0, _ := ret[0].(*domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockVehicleRepositoryMockRecorder) FindByUUID(vUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockVehicleRepository)(nil).FindByUUID), vUUID)
}
