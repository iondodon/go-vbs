// Code generated by ctxboot; DO NOT EDIT.

package main

import (
	"github.com/iondodon/ctxboot"
	"reflect"
	"log"
	"fmt"
	
	controller10 "github.com/iondodon/go-vbs/controller"
	
	repository "github.com/iondodon/go-vbs/repository"
	
	booking2 "github.com/iondodon/go-vbs/repository/booking"
	
	bookingdate2 "github.com/iondodon/go-vbs/repository/bookingdate"
	
	customer2 "github.com/iondodon/go-vbs/repository/customer"
	
	vehicle2 "github.com/iondodon/go-vbs/repository/vehicle"
	
	booking6 "github.com/iondodon/go-vbs/usecase/booking"
	
	bookingdate3 "github.com/iondodon/go-vbs/usecase/bookingdate"
	
	vehicle4 "github.com/iondodon/go-vbs/usecase/vehicle"
	
)

// ComponentContext embeds CtxbootComponentContext and adds getter methods
type ComponentContext struct {
	*ctxboot.CtxbootComponentContext
}

// RegisterComponent registers a component instance and automatically deduces its type
func (c *ComponentContext) RegisterComponent(instance interface{}) error {
	if instance == nil {
		return fmt.Errorf("cannot register nil component")
	}
	return c.SetComponent(reflect.TypeOf(instance), instance)
}

// InjectComponents initializes all registered components and their dependencies
func (c *ComponentContext) InjectComponents() error {
	return c.InitializeComponents()
}

// RegisterScanedComponenets registers all components
func (c *ComponentContext) RegisterScanedComponenets() error {
	// Register components in dependency order
	
	// Register controller10.BookingController
	if err := c.SetComponent(reflect.TypeOf((*controller10.BookingController)(nil)), &controller10.BookingController{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "controller10.BookingController", err)
	}
	
	// Register controller10.TokenController
	if err := c.SetComponent(reflect.TypeOf((*controller10.TokenController)(nil)), &controller10.TokenController{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "controller10.TokenController", err)
	}
	
	// Register controller10.VehicleController
	if err := c.SetComponent(reflect.TypeOf((*controller10.VehicleController)(nil)), &controller10.VehicleController{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "controller10.VehicleController", err)
	}
	
	// Register booking2.BookingRepository
	if err := c.SetComponent(reflect.TypeOf((*booking2.BookingRepository)(nil)), &booking2.BookingRepository{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "booking2.BookingRepository", err)
	}
	
	// Register bookingdate2.BookingDateRepository
	if err := c.SetComponent(reflect.TypeOf((*bookingdate2.BookingDateRepository)(nil)), &bookingdate2.BookingDateRepository{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "bookingdate2.BookingDateRepository", err)
	}
	
	// Register customer2.CustomerRepository
	if err := c.SetComponent(reflect.TypeOf((*customer2.CustomerRepository)(nil)), &customer2.CustomerRepository{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "customer2.CustomerRepository", err)
	}
	
	// Register repository.Queries
	if err := c.SetComponent(reflect.TypeOf((*repository.Queries)(nil)), &repository.Queries{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "repository.Queries", err)
	}
	
	// Register vehicle2.VehicleRepository
	if err := c.SetComponent(reflect.TypeOf((*vehicle2.VehicleRepository)(nil)), &vehicle2.VehicleRepository{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "vehicle2.VehicleRepository", err)
	}
	
	// Register booking6.BookVehicle
	if err := c.SetComponent(reflect.TypeOf((*booking6.BookVehicle)(nil)), &booking6.BookVehicle{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "booking6.BookVehicle", err)
	}
	
	// Register booking6.GetAllBookings
	if err := c.SetComponent(reflect.TypeOf((*booking6.GetAllBookings)(nil)), &booking6.GetAllBookings{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "booking6.GetAllBookings", err)
	}
	
	// Register bookingdate3.GetBookingDates
	if err := c.SetComponent(reflect.TypeOf((*bookingdate3.GetBookingDates)(nil)), &bookingdate3.GetBookingDates{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "bookingdate3.GetBookingDates", err)
	}
	
	// Register vehicle4.GetVehicle
	if err := c.SetComponent(reflect.TypeOf((*vehicle4.GetVehicle)(nil)), &vehicle4.GetVehicle{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "vehicle4.GetVehicle", err)
	}
	
	// Register vehicle4.IsAvailableForHire
	if err := c.SetComponent(reflect.TypeOf((*vehicle4.IsAvailableForHire)(nil)), &vehicle4.IsAvailableForHire{}); err != nil {
		log.Fatalf("Failed to register component %s: %v", "vehicle4.IsAvailableForHire", err)
	}
	
	
	return nil
}

// NewComponentContext creates a new component context instance
func NewComponentContext() *ComponentContext {
	return &ComponentContext{ctxboot.NewCtxbootComponentContext()}
}

// Component getter methods

// GetBookingController returns the BookingController component
func (c *ComponentContext) GetBookingController() (*controller10.BookingController, error) {
	component, err := c.GetComponent(reflect.TypeOf((*controller10.BookingController)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*controller10.BookingController), nil
}

// GetTokenController returns the TokenController component
func (c *ComponentContext) GetTokenController() (*controller10.TokenController, error) {
	component, err := c.GetComponent(reflect.TypeOf((*controller10.TokenController)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*controller10.TokenController), nil
}

// GetVehicleController returns the VehicleController component
func (c *ComponentContext) GetVehicleController() (*controller10.VehicleController, error) {
	component, err := c.GetComponent(reflect.TypeOf((*controller10.VehicleController)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*controller10.VehicleController), nil
}

// GetBookingRepository returns the BookingRepository component
func (c *ComponentContext) GetBookingRepository() (*booking2.BookingRepository, error) {
	component, err := c.GetComponent(reflect.TypeOf((*booking2.BookingRepository)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*booking2.BookingRepository), nil
}

// GetBookingDateRepository returns the BookingDateRepository component
func (c *ComponentContext) GetBookingDateRepository() (*bookingdate2.BookingDateRepository, error) {
	component, err := c.GetComponent(reflect.TypeOf((*bookingdate2.BookingDateRepository)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*bookingdate2.BookingDateRepository), nil
}

// GetCustomerRepository returns the CustomerRepository component
func (c *ComponentContext) GetCustomerRepository() (*customer2.CustomerRepository, error) {
	component, err := c.GetComponent(reflect.TypeOf((*customer2.CustomerRepository)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*customer2.CustomerRepository), nil
}

// GetQueries returns the Queries component
func (c *ComponentContext) GetQueries() (*repository.Queries, error) {
	component, err := c.GetComponent(reflect.TypeOf((*repository.Queries)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*repository.Queries), nil
}

// GetVehicleRepository returns the VehicleRepository component
func (c *ComponentContext) GetVehicleRepository() (*vehicle2.VehicleRepository, error) {
	component, err := c.GetComponent(reflect.TypeOf((*vehicle2.VehicleRepository)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*vehicle2.VehicleRepository), nil
}

// GetBookVehicle returns the BookVehicle component
func (c *ComponentContext) GetBookVehicle() (*booking6.BookVehicle, error) {
	component, err := c.GetComponent(reflect.TypeOf((*booking6.BookVehicle)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*booking6.BookVehicle), nil
}

// GetGetAllBookings returns the GetAllBookings component
func (c *ComponentContext) GetGetAllBookings() (*booking6.GetAllBookings, error) {
	component, err := c.GetComponent(reflect.TypeOf((*booking6.GetAllBookings)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*booking6.GetAllBookings), nil
}

// GetGetBookingDates returns the GetBookingDates component
func (c *ComponentContext) GetGetBookingDates() (*bookingdate3.GetBookingDates, error) {
	component, err := c.GetComponent(reflect.TypeOf((*bookingdate3.GetBookingDates)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*bookingdate3.GetBookingDates), nil
}

// GetGetVehicle returns the GetVehicle component
func (c *ComponentContext) GetGetVehicle() (*vehicle4.GetVehicle, error) {
	component, err := c.GetComponent(reflect.TypeOf((*vehicle4.GetVehicle)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*vehicle4.GetVehicle), nil
}

// GetIsAvailableForHire returns the IsAvailableForHire component
func (c *ComponentContext) GetIsAvailableForHire() (*vehicle4.IsAvailableForHire, error) {
	component, err := c.GetComponent(reflect.TypeOf((*vehicle4.IsAvailableForHire)(nil)))
	if err != nil {
		return nil, err
	}
	return component.(*vehicle4.IsAvailableForHire), nil
}

