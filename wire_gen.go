// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/iondodon/go-vbs/auth/in/authController"
	business3 "github.com/iondodon/go-vbs/booking/business"
	"github.com/iondodon/go-vbs/booking/business/bookVehicleService"
	"github.com/iondodon/go-vbs/booking/business/getAllBookingsService"
	"github.com/iondodon/go-vbs/booking/in/bookingController"
	"github.com/iondodon/go-vbs/booking/out/bookingDateRepository"
	"github.com/iondodon/go-vbs/booking/out/bookingRepository"
	business2 "github.com/iondodon/go-vbs/customer/business"
	"github.com/iondodon/go-vbs/customer/out/customerRepository"
	"github.com/iondodon/go-vbs/repository"
	"github.com/iondodon/go-vbs/vehicle/business"
	"github.com/iondodon/go-vbs/vehicle/business/availabilityService"
	"github.com/iondodon/go-vbs/vehicle/business/getVehicleService"
	"github.com/iondodon/go-vbs/vehicle/in/vehicleController"
	"github.com/iondodon/go-vbs/vehicle/out/vehicleRepository"
	"log"
	"os"
)

// Injectors from wire.go:

// Wire injector functions for individual controllers
func InitializeAuthController(db *sql.DB) (*authController.Controller, error) {
	infoLogger := ProvideInfoLogger()
	errorLogger := ProvideErrorLogger()
	controller := ProvideAuthController(infoLogger, errorLogger)
	return controller, nil
}

func InitializeVehicleController(db *sql.DB) (*vehicleController.Controller, error) {
	infoLogger := ProvideInfoLogger()
	errorLogger := ProvideErrorLogger()
	queries := ProvideQueries(db)
	vehicleRepository := ProvideVehicleRepository(queries)
	getVehicleUseCase := ProvideGetVehicleUseCase(vehicleRepository)
	controller := ProvideVehicleController(infoLogger, errorLogger, getVehicleUseCase)
	return controller, nil
}

func InitializeBookingController(db *sql.DB) (*bookingController.Controller, error) {
	infoLogger := ProvideInfoLogger()
	errorLogger := ProvideErrorLogger()
	queries := ProvideQueries(db)
	vehicleRepository := ProvideVehicleRepository(queries)
	customerRepository := ProvideCustomerRepository(queries)
	bookingRepository := ProvideBookingRepository(queries)
	bookingDateRepository := ProvideBookingDateRepository(queries)
	availabilityUseCase := ProvideAvailabilityUseCase(vehicleRepository)
	bookVehicleUseCase := ProvideBookVehicleUseCase(infoLogger, errorLogger, vehicleRepository, customerRepository, bookingRepository, bookingDateRepository, availabilityUseCase)
	getAllBookingsUseCase := ProvideGetAllBookingsUseCase(bookingRepository)
	controller := ProvideBookingController(infoLogger, errorLogger, db, bookVehicleUseCase, getAllBookingsUseCase)
	return controller, nil
}

// wire.go:

// Logger wrapper types to distinguish between different loggers
type InfoLogger struct {
	*log.Logger
}

type ErrorLogger struct {
	*log.Logger
}

// Logger providers
func ProvideInfoLogger() InfoLogger {
	return InfoLogger{log.New(os.Stdout, "INFO\t", log.Ldate|log.Ltime)}
}

func ProvideErrorLogger() ErrorLogger {
	return ErrorLogger{log.New(os.Stderr, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile)}
}

// Repository providers
func ProvideQueries(db *sql.DB) *repository.Queries {
	return repository.New(db)
}

// Vehicle domain providers
func ProvideVehicleRepository(queries *repository.Queries) business.VehicleRepository {
	return vehicleRepository.New(queries)
}

func ProvideGetVehicleUseCase(vehicleRepo business.VehicleRepository) business.GetVehicleUseCase {
	return getVehicleService.New(vehicleRepo)
}

func ProvideAvailabilityUseCase(vehicleRepo business.VehicleRepository) business.AvailabilityUseCase {
	return availabilityService.New(vehicleRepo)
}

func ProvideVehicleController(
	infoLog InfoLogger,
	errorLog ErrorLogger,
	getVehicleUC business.GetVehicleUseCase,
) *vehicleController.Controller {
	return vehicleController.New(infoLog.Logger, errorLog.Logger, getVehicleUC)
}

// Customer domain providers
func ProvideCustomerRepository(queries *repository.Queries) business2.CustomerRepository {
	return customerRepository.New(queries)
}

// Booking domain providers
func ProvideBookingRepository(queries *repository.Queries) business3.BookingRepository {
	return bookingRepository.New(queries)
}

func ProvideBookingDateRepository(queries *repository.Queries) business3.BookingDateRepository {
	return bookingDateRepository.New(queries)
}

func ProvideBookVehicleUseCase(
	infoLog InfoLogger,
	errorLog ErrorLogger,
	vehicleRepo business.VehicleRepository,
	customerRepo business2.CustomerRepository,
	bookingRepo business3.BookingRepository,
	bookingDateRepo business3.BookingDateRepository,
	vehicleAvailabilityService business.AvailabilityUseCase,
) business3.BookVehicleUseCase {
	return bookVehicleService.New(
		infoLog.Logger,
		errorLog.Logger,
		vehicleRepo,
		customerRepo,
		bookingRepo,
		bookingDateRepo,
		vehicleAvailabilityService,
	)
}

func ProvideGetAllBookingsUseCase(bookingRepo business3.BookingRepository) business3.GetAllBookingsUseCase {
	return getAllBookingsService.New(bookingRepo)
}

func ProvideBookingController(
	infoLog InfoLogger,
	errorLog ErrorLogger,
	db *sql.DB,
	bookVehicleUC business3.BookVehicleUseCase,
	getAllBookingsUC business3.GetAllBookingsUseCase,
) *bookingController.Controller {
	return bookingController.New(infoLog.Logger, errorLog.Logger, db, bookVehicleUC, getAllBookingsUC)
}

// Auth domain providers
func ProvideAuthController(infoLog InfoLogger, errorLog ErrorLogger) *authController.Controller {
	return authController.New(infoLog.Logger, errorLog.Logger)
}

// Provider sets
var RepositorySet = wire.NewSet(
	ProvideQueries,
	ProvideVehicleRepository,
	ProvideCustomerRepository,
	ProvideBookingRepository,
	ProvideBookingDateRepository,
)

var VehicleSet = wire.NewSet(
	ProvideGetVehicleUseCase,
	ProvideAvailabilityUseCase,
	ProvideVehicleController,
)

var BookingSet = wire.NewSet(
	ProvideBookVehicleUseCase,
	ProvideGetAllBookingsUseCase,
	ProvideBookingController,
)

var AuthSet = wire.NewSet(
	ProvideAuthController,
)

var LoggerSet = wire.NewSet(
	ProvideInfoLogger,
	ProvideErrorLogger,
)

// Main provider set that combines all others
var ApplicationSet = wire.NewSet(
	LoggerSet,
	RepositorySet,
	VehicleSet,
	BookingSet,
	AuthSet,
)
